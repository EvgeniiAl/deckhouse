#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Run validation script on every push to dev branches.
#
# Validation scripts require  PR title, PR description and diff.
# Title and description are available when PR is already created.
# Diff content is fetched using 'diff_url' field in payload when PR is available.
# If PR is not created, 'compare' field is used to get diff between base branch and dev branch.
#
# See also scripts/validation_run.sh.
#

name: Validations
on:
  pull_request_target:
     types:
      - opened
      - synchronize

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.event.number }}-validation
  cancel-in-progress: true

jobs:

  # <template: pull_request_info>
  pull_request_info:
    name: Get pull request reference
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.ref }}
    steps:
      - name: Check if allow to run tests
        id: check
        uses: actions/github-script@v5.0.0
        with:
          script: |
            // Assume workflow_dispatch is safe to run.
            // TODO add owner, repo, sha to inputs to check them here.
            if (context.eventName === 'workflow_dispatch') {
              core.info(`workflow_dispatch detected, set should_run to 'true'`);
              return core.setOutput('should_run', 'true');
            }

            if (!context.payload.pull_request) {
              return core.setFailed(`Unknown event, no pull request context. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            // Fetch fresh pull request state using sha.
            // Why? Workflow rerun of 'opened' pull request contains outdated labels.
            const owner = context.payload.pull_request.head.repo.owner.login
            const repo = context.payload.pull_request.head.repo.name
            const commit_sha = context.payload.pull_request.head.sha
            core.info(`List pull request inputs: ${JSON.stringify({ owner, repo, commit_sha })}`);
            const response = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha });
            if (response.status != 200) {
              return core.setFailed(`Cannot list PRs for commit ${commit_sha}: ${JSON.stringify(response)}`);
            }

            // No PR found, do not run next jobs.
            if (!response.data || response.data.length === 0) {
              return core.setFailed(`No pull_request found. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            const prRepo = context.payload.pull_request.head.repo.full_name;
            const targetRepo = context.payload.repository.full_name;
            const isInternal = prRepo === targetRepo;
            const isDependabot = (context.actor === 'dependabot[bot]');
            const isChangelog = context.payload.pull_request.head.ref.startsWith('changelog/v');
            const okToTest = response.data[0].labels.some((l) => l.name === 'ok-to-test');
            core.info(`PR internal?          ${isInternal}`)
            core.info(`PR from dependabot?   ${isDependabot}`)
            core.info(`PR changelog?         ${isChangelog}`)
            core.info(`PR has 'ok-to-test'?  ${okToTest}`)

            if (isInternal && !isDependabot) {
              // Ignore changelog pull requests.
              if (isChangelog) {
                return core.setFailed(`PR#${context.payload.pull_request.number} for changelog is ignored.`);
              }
            } else {
              // External and dependabot pull requests should be labeled with 'ok-to-test'.
              if (!okToTest) {
                return core.setFailed(`PR#${context.payload.pull_request.number} without label 'ok-to-test' is ignored.`);
              }
            }

      # Checkhout the merge commit
      - name: Checkout PR merge commit
        uses: actions/checkout@v2.4.0
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"

      # Detect dangerous changes in external PR.
      - name: Check for dangerous changes
        uses: dorny/paths-filter@v2
        if: github.event.pull_request.head.repo.full_name != github.repository
        id: changes
        with:
          token: ${{ secrets.BOATSWAIN_GITHUB_TOKEN }}
          filters: |
            dangerous:
              - './.github/**'
              - './.gitlab/**'
              - './tools/**'
              - './testing/**'
              - './docs/**/js/**'
              - './docs/**/css/**'
              - './docs/**/images/**'
              - './docs/**/assets/**'

      # Stop workflow if external PR contains dangerous changes.
      - name: Fail workflow on dangerous changes
        if: steps.changes.outputs.dangerous == 'true'
        uses: actions/github-script@v5.0.0
        with:
          script: |
            core.setFailed('External PR contains dangerous changes.')

      # Set output.
      - name: Return PR merge commit ref
        id: ref
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const ref = `refs/pull/${ context.issue.number }/merge`
            core.info(`ref: '${ref}'`)
            core.setOutput('ref', ref)
  # </template: pull_request_info>

  # Get pull request info for validation scripts.
  # Push event has no pull request information, so retrieve it with Rest API.
  discover:
    name: Prepare input for validation scripts
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    outputs:
      run_no_cyrillic: ${{ steps.on_push.outputs.run_no_cyrillic }}
      label_no_cyrillic: ${{ steps.on_push.outputs.label_no_cyrillic }}
      run_doc_changes: ${{ steps.on_push.outputs.run_doc_changes }}
      label_doc_changes: ${{ steps.on_push.outputs.label_doc_changes }}
      run_copyright: ${{ steps.on_push.outputs.run_copyright }}
      label_copyright: ${{ steps.on_push.outputs.label_copyright }}
      pr_title: ${{ steps.on_push.outputs.pr_title }}
      pr_description: ${{ steps.on_push.outputs.pr_description }}
      diff_url: ${{ steps.on_push.outputs.diff_url }}

    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_step>
      - id: on_push
        name: Check labels on push
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ci = require('./.github/scripts/js/ci');
            return await ci.checkValidationLabels({ github, context, core });

  no_cyrillic_validation:
    name: No Cyrillic Validation
    env:
      VALIDATE_TITLE: ${{ needs.discover.outputs.pr_title }}
      VALIDATE_DESCRIPTION: ${{ needs.discover.outputs.pr_description }}

    needs:
      - discover
      - pull_request_info
    if: needs.discover.outputs.run_no_cyrillic == 'true'
    runs-on: ubuntu-latest
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_step>

      - name: Run check
        env:
          DIFF_URL: ${{ needs.discover.outputs.diff_url }}
          SKIP_LABEL_NAME: ${{ needs.discover.outputs.label_no_cyrillic }}
        run: |
          ./.github/scripts/validation_run.sh ./testing/validate_no_cyrillic.sh

  doc_validation:
    name: Documentation Validation

    needs:
      - discover
      - pull_request_info
    if: needs.discover.outputs.run_doc_changes == 'true'
    runs-on: ubuntu-latest
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_step>

      - name: Run check
        env:
          DIFF_URL: ${{ needs.discover.outputs.diff_url }}
          SKIP_LABEL_NAME: ${{ needs.discover.outputs.label_doc_changes }}
        run: |
          ./.github/scripts/validation_run.sh ./testing/validate_doc_changes.sh

  copyright_validation:
    name: Copyright Validation

    needs:
      - discover
      - pull_request_info
    if: needs.discover.outputs.run_copyright == 'true'
    runs-on: ubuntu-latest
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_step>

      - name: Run check
        env:
          DIFF_URL: ${{ needs.discover.outputs.diff_url }}
          SKIP_LABEL_NAME: ${{ needs.discover.outputs.label_copyright }}
        run: |
          ./.github/scripts/validation_run.sh ./testing/validate_copyright.sh
